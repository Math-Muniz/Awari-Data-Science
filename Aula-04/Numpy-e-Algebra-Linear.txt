# Leitura: Numpy e Álgebra Linear
Logotipo do Numpy, que remete a um cubo mágico, um “clássico” em Álgebra Linear. Fonte: Wikipedia

Aprender Numpy é uma das bases obrigatórias para o trabalho com dados na atualidade. Esta biblioteca Python tornou-se unanimidade na lida com matrizes e Álgebra Linear em empreendimentos científicos, de engenharia, comerciais e industriais. 

## O que é Numpy?
Numpy é uma biblioteca Python de código aberto, cujo nome é uma abreviação de Numeric Python (Python Numérico). Foi criada em 2005 por Travis Oliphant, o fundador da empresa por trás do Anaconda (suíte de ferramentas para trabalho com dados), e evoluída desde então.

O que Numpy faz de tão especial é fornecer um objeto array multidimensional — chamado ndarray — e vários objetos derivados, além de rotinas para operações matemáticas, lógicas, estatísticas etc. sobre tais arrays.

Se essa descrição parecer muito difícil, pense em uma tabela do Microsoft Excel, com vários dados relacionados em linhas e colunas. Isso é um array. Você pode conhecê-lo, também, como matriz, o que não é errado. Mas há nomenclaturas diferentes que a comunidade de Data Science e Machine Learning usa.

Para sermos mais precisos, Numpy nos permite trabalharmos com arrays:

* unidimensionais: pense em uma lista simples, ou seja, dados em uma dimensão (1-D), tecnicamente chamados de vetores;
* bidimensionais: pense na tabela do Excel, com dados em linhas e colunas, ou seja, dados em duas dimensão (2-D); tecnicamente, matrizes;
* n-dimensionais: dados em três (3-D) ou mais dimensões, que são mais difíceis de exemplificar e até de intuir (pense em algo como uma tabela contendo outras tabelas dentro de suas células), tecnicamente chamados tensores.

Numpy é considerado padrão universal para trabalhar com dados numéricos em Python e está no centro dos ecossistemas científicos da linguagem.

Para se ter ideia de sua importância, várias outras bibliotecas Python que você verá e utilizará com frequência em Ciência de Dados, como Pandas, SciPy, Matplotlib, scikit-learn etc., dependem de Numpy para funcionarem.

### Que problema resolve?
Talvez você se lembre disso do Ensino Médio ou, se é de “exatas”, já viu na faculdade. Fazer operações com matrizes 2-D, como somar duas delas, por exemplo, não é tarefa fácil. Multiplicação, então, nem se fala.

Linguagens de programação como Python, com suas estruturas de dados sequenciais, como listas, tuplas, dicionários etc., facilitaram algumas coisas, como multiplicar duas listas que contém outras listas, o que, tecnicamente, forma um array Python. 

Ocorre, porém, que nos bastidores computacionais, essas operações nas estruturas nativas da linguagem não são eficientes. Ou seja, são lentas e caras em termos de processamento.

Numpy surgiu, então, com recursos de baixo nível (mais próximos do modo como o computador funciona) que tornam operações com arrays muito mais eficientes em termos de velocidade de processamento, armazenamento em memória, entre outras características técnicas. 

Além disso, permite escrever muito menos código para lidar com esses conjuntos de dados do que precisaríamos em Python nativo. Estão aí os motivos para seu grande sucesso.

### Onde entra a Álgebra Linear?
À medida que você trabalha com Numpy, estará, mesmo sem saber, lidando com muitos conceitos de Álgebra Linear. 

Álgebra linear é um ramo da matemática que trata de matrizes, vetores, transformações lineares, entre outros conceitos. 

Você não precisa saber Álgebra Linear de antemão para trabalhar com Numpy. Porém, desenvolver algum conhecimento gradativo a respeito é interessante se você quiser compreender melhor a biblioteca e é recomendado para o trabalho com conjuntos dados em duas ou mais dimensões em sua carreira.

Como é um tópico da matemática, não tem jeito, se você quiser ou precisar aprendê-lo, terá de sujar as mãos com fórmulas e cálculos. Este tutorial pode ser um começo se você não sabe nada.

# Praticando com Numpy
Vamos usar o Google Colab para demonstrar comandos em Numpy. Se você quiser acompanhar, inicie um novo arquivo, insira e rode na primeira célula:

import numpy as np
Isso importará a biblioteca Numpy em nosso código. O trecho as np permite que usemos o Numpy citando-o apenas como np, o que torna nosso código mais conciso.

## Criando um array
Podemos criar um array unidimensional atribuindo-o a uma variável e chamando-o em seguida:

a1 = np.array([1, 2, 3, 4, 5, 6])
a1
# Resultado: array([1, 2, 3, 4, 5, 6])
Um array bidimensional ficaria assim:

a2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
a2
# Resultado:array([[1, 2, 3],
#                 [4, 5, 6],
#                 [7, 8, 9]])
Parece-se com três listas dentro de uma lista em Python. A diferença está apenas nos bastidores computacionais mesmo.

Um array n-dimensional poderia ser:

a3 = np.array([[[0, 1, 2, 3],[4, 5, 6, 7]],[[0, 1, 2, 3],[4, 5, 6, 7]],[[0 ,1 ,2, 3],[4, 5, 6, 7]]])
a3
# Resultado[[[0 1 2 3]
#           [4 5 6 7]]
#
#           [[0 1 2 3]
#            [4 5 6 7]]

#          [[0 1 2 3]
#           [4 5 6 7]]]
Uma forma bastante útil de criarmos arrays é por meio do método arange, que cria intervalos de elementos:

a4 = np.arange(100)
Isto gerará um array com os números de 0 a 99.

Os métodos np.zeros(), np.ones e np.empy() funcionam de forma parecida. O primeiro gera um array de zeros. O segundo, de números 1 (um). O terceiro, uma lista com elementos numéricos quaisquer. Entre parênteses, devemos informar a quantidade de elementos do array.

Outra forma de gerar números é usando o método random do próprio Numpy, que gera arrays com elementos pseudo-aleatórios. No entanto, esses números mudam a cada vez que o código é rodado.

Na prática, você verá que criamos arrays como estes apenas para testes ou brincadeiras. No trabalho com dados, importamos dados de arquivos, bancos de dados, JSON, APIs etc. que formarão nossos arrays, para trabalharmos neles. Chegaremos lá ao longo do curso.

## Mexendo em arrays
Podemos ordenar um array com o método sort():

a5 = np.array([6, 7, 2, 4, 5, 3, 8, 1, 9, 0]
np.sort(a5)
# Resultado: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
Ou remodelar um array — no nosso caso, de 9 elementos para 3 linhas e 3 colunas — com reshape():

a6 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
a6.reshape(3,3)
# Resultado: array([[1, 2, 3],
#                  [4, 5, 6],
#                  [7, 8, 9]])
Ou concatenar dois arrays em um único com concatenate():

a71 = np.array([0,1,2,3,4])
a72 = np.array([5,6,7,8,9])
np.concatenate((a71, a72))
#Resultado: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
Podemos fatiar um array em outros arrays, da mesma forma que fazemos fatiamento (slicing) em listas de Python:

a80 = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
a81 = a80[3:6] # Resultado: array([3, 4, 5])
a82 = a80[5:]  # Resultado: array([5, 6, 7, 8, 9])
Podemos, também, dividir uma matriz com duas colunas em dois arrays diferentes com array_split():

a90 = np.array([[1, 2, 3, 4, 5],['a','b','c','d','e']])
a91 = np.array_split(a100, (2))
a91
# [array([['1', '2', '3', '4', '5']], dtype='<U21'),
#  array([['a', 'b', 'c', 'd', 'e']], dtype='<U21')]
Tamanho de um array

Algo que você usará muito na lida com dados é saber o tamanho (quantos elementos) e a forma (quantas dimensões ou linhas vs. colunas) que um conjunto de dados tem.

O método ndim permite saber a dimensão (como, neste exemplo, do nosso array atribuído à variável a3, anteriormente):

a3.ndim
# Resultado: 3 (significa que tem 3 dimensões)
Para o tamanho, usamos size:

a3.size
# Resultado: 3 (significa que tem 24 elementos)
Indexação e fatiamento

Já vimos como fazer o fatiamento (slicing) de arrays, acima. Numpy oferece outros facilitadores para isso.

Nosso array a1 possui 6 elementos, de 1 a 6. Podemos fatiar todos os que estão antes do índice 3 com:

a1[a1 < 3]
# Resultado: array([1, 2])
Ou encontrar todos os elementos divisíveis por 2 com:

a1[a1%2==0]
# Resultado: array([2, 4, 6])
Note que dentro dos colchetes, estamos executando Python puro. No caso, elementos cujo módulo (resto da divisão) por 2 for igual a zero.

## Operações básicas
Por causa das características e da eficiência de Numpy, podemos fazer operações aritméticas com arrays de forma simples, como se estivéssemos operando com números.

b1 = np.array([1,2,2,1])
b2 = np.array([2,2,1,2])
print(b1 + b2)
print(b1 - b2)
print(b1 * b2)
print(b1 / b2)
# Resultados: [3 4 3 3]
#             [-1  0  1 -1]
#             [2 4 2 2]
#             [0.5 1.  2.  0.5]
### sum()

Se quisermos somar todos os elementos de arrays, usamos sum():

b3 = np.array([0,1,2,3,4,5,6,7,8,9])
b3.sum()
# Resultado: 45 (soma de 0 + 1 + 2 + 3...)
### max()

Precisamos saber qual o maior elemento? Usamos max():
b3.max()
# Resultado: 9
### min()
O menor elemento é buscado com min():

b3.min()
# Resultado: 0
### mean()

Queremos a média, uma medida já da Estatística Descritiva? Numpy fornece por meio de mean():

b3.mean()
# Resultado: 4.5
### prod()

Para multiplicar todos os elementos de um vetor, usamos prod():

b4 = ([1,3,5])
np.prod(b4)
# Resultado: 15
# Conclusão
Como se pode ver, apesar de bastante robusto e a escolha “número um” para operações numéricas em Python, Numpy é bastante simples de entender e de usar.

Este tópico arranha apenas a superfície da biblioteca, de qualquer modo. Ela fornece muitos métodos a mais, para as mais variadas situações. 

Você não precisa decorar todos, obviamente. Mas deve saber como consultar a documentação, principalmente a referência, sempre que se deparar com um problema com matrizes ou arrays multidimensionais.

Aliás, a documentação oficial é muito clara e bem explicativa, sem a necessidade de recorrer a outras fontes, na maioria dos casos. 

Para iniciantes completos, este guia, por exemplo, é a porta de entrada. Se você quer entender tópicos amplos rapidamente, veja Fundamentals. A Numpy Reference é onde você encontra como tudo funciona, de A a Z. 

Também há tutoriais disponíveis para você tentar, à medida que você evolui. Entre eles, exercícios para entender mais sobre álgebra linear em arrays n-dimensionais, para gerar fractais, para processar imagens de raio-x e até treinar um algoritmo que reconhece dígitos em imagens.

Você verá e usará Numpy de maneira extensiva no seu dia a dia. Aprenda-o de maneira gradativa. Aos poucos, você verá que será um “piloto automático” usar Numpy para diversas tarefas com dados.

Referências
https://numpy.org/
https://numpy.org/doc/stable/user/absolute_beginners.html
https://numpy.org/doc/stable/user/quickstart.html
https://numpy.org/doc/stable/reference/index.html
https://numpy.org/doc/stable/user/basics.html
